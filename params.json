{
  "name": "uniRW",
  "tagline": "A universal reader & writer package for stateful data file processing.",
  "body": "# uniRW [![pypi](https://badge.fury.io/py/uniRW.svg)](https://badge.fury.io/py/uniRW) [![Build Status](https://travis-ci.org/law-liet/uniRW.svg?branch=master)](https://travis-ci.org/law-liet/uniRW) [![codecov](https://codecov.io/gh/law-liet/uniRW/branch/master/graph/badge.svg)](https://codecov.io/gh/law-liet/uniRW)\r\n\r\n**uniRW** is a universal reader & writer package for complex, stateful data file processing.\r\n\r\n* **Declarative:** Declare value structures and hierarchies, declare the state to be kept track of, declare the file structure, and **uniRW** will take care the details and process data in a predictable way. Declarative processing enables easy debugging and focuses on logic. \r\n* **Reusable:** Reuse a reader/writer in reading/writing multiple files. Reuse common value structures in different readers/writers. Compose simple hierarchies into more complex hierarchies. Focus on common patterns in input files and standardize output files.\r\n* **Universal:** Process any files with lines split by any regular expressions. Apply user-defined map, filter and reduce, keep track of evolving state during processing. Store and output data in a user-defined hierarchy of values.  \r\n\r\n\r\n# Installation\r\nEasy to install with [pip](https://pip.pypa.io/en/stable/).\r\n```\r\npip install uniRW\r\n```\r\n\r\n# Quick Start\r\nSee [examples](https://github.com/law-liet/uniRW/tree/master/examples) for more examples.\r\n\r\nImport the package:\r\n```Python\r\n>>> import uniRW as RW\r\n```\r\n\r\n## Read\r\n\r\nSuppose we want to read the following file named *example.csv* into a dictionary of maximum grades of different subjects:\r\n\r\n    Name,Subject,Grade\r\n    Alice,Math,4.0\r\n    Alice,CS,3.0\r\n    Alice,Math,3.8\r\n\r\nDefine the value structures and hierarchy:\r\n\r\n``` python\r\n>>> name, subject = RW.Value('Name'), RW.Value('Subject')\r\n>>> grade = RW.Value('Grade', map_f=lambda _, x: float(x), reduce_f=max)\r\n>>> hierarchy = {name: {subject: [grade]}}\r\n```\r\n\r\nDefine the input file:\r\n\r\n```python\r\n>>> grade_file = RW.DataFile('example1.csv', RW.Line(','), header_lineno=0)\r\n```\r\n\r\nCreate the reader and read the file:\r\n\r\n```python\r\n>>> grade_dict, _ = RW.HReader(hierarchy).read(grade_file)\r\n>>> print(grade_dict)\r\n{'Alice': {'Math': {'Grade': 4.0}, 'CS': {'Grade': 3.0}}}\r\n```\r\n\r\n## Write\r\n\r\nSuppose we want to write the above `grade_dict` to a new file *new_example.csv* that looks like this:\r\n\r\n    Name,Subject,Grade\r\n    Alice,CS,3.0\r\n    Alice,Math,4.0\r\n\r\nDefine the value line (with `name`, `subject`, and `grade` the same as above):\r\n\r\n```python\r\n>>> value_line = [name, subject, grade]\r\n```\r\n\r\nDefine the output file:\r\n\r\n```python\r\n>>> output_file = RW.OutputFile('new_example.csv', RW.OutputLine(','))\r\n```\r\n\r\nCreate the writer and write the file (with `hierarchy` the same as above):\r\n\r\n```python\r\n>>> RW.HWriter(hierarchy, value_line).write(output_file, grade_dict, sort_by='Grade')\r\n```\r\n\r\n# Documentation\r\nSee [wiki](https://github.com/law-liet/uniRW/wiki) for documentation.\r\n    \r\n# Future Work\r\n- Better abstraction/structure\r\n- Hierarchy Generalization\r\n- Optimization\r\n- Add type checker (Python 3.5 typing module + Mypy ?)\r\n\r\n# Change Log\r\nSee [Change Log](https://github.com/law-liet/uniRW/blob/master/change_log.md).\r\n\r\n# License\r\nRead [License](https://github.com/law-liet/uniRW/blob/master/LICENSE) file.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}